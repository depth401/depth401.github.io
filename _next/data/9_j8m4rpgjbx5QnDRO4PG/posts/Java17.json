{"pageProps":{"slug":"Java17","frontmatter":{"title":"Java 17","overview":"Java 11 から Java 17 で追加された言語機能についてまとめ","tags":["Java"],"publishedAt":"2021-10-29","updatedAt":"2021-10-29","draft":false},"contentHtml":"\n<p>\n  Java 17 で正式にリリースされた機能の中で普段のプログラミングに影響が出そうな変更だけを紹介する。\n  JVM や API の内部実装の改善は勿論のこと、<a href=\"https://openjdk.java.net/jeps/414\">Vector API</a> のような必要となった場合は使うが、そういう場面に出会わない限り使わないようなものは省いている。\n  Java 11 から Java 17 の間で追加された API は <a href=\"https://docs.oracle.com/en/java/javase/17/docs/api/new-list.html\">New API since JDK 11</a> で確認できる。\n  基本的には <a href=\"https://qiita.com/nowokay\">きしだ なおき</a> さんが Qiita に投稿している記事から JEP を辿り、その内容を元に作成した。\n</p>\n<p>記事内で紹介するコードは <a href=\"https://openjdk.java.net/jeps/0\">JEP</a> もしくは <a href=\"https://docs.oracle.com/en/java/javase/17/docs/api/index.html\">javadoc</a> から転載した。</p>\n<h2 id=\"変更一覧\"><a href=\"#変更一覧\">変更一覧</a></h2>\n<h3 id=\"言語仕様\"><a href=\"#言語仕様\">言語仕様</a></h3>\n<ul>\n  <li><a href=\"#switch-expressions-java-12-13-14\">Switch Expressions</a></li>\n  <li><a href=\"#text-blocks-java-13-14-15\">Text Blocks</a></li>\n  <li><a href=\"#records-java-14-15-16\">Records</a></li>\n  <li><a href=\"#pattern-matching-for-instanceof-java-14-15-16\">Pattern Matching for instanceof</a></li>\n  <li><a href=\"#sealed-classes-java-15-16-17\">Sealed Classes</a></li>\n  <li><a href=\"#pattern-matching-for-switch-java-17\">Pattern Matching for switch</a></li>\n</ul>\n<h3 id=\"api\"><a href=\"#api\">API</a></h3>\n<ul>\n  <li>String#transform</li>\n  <li>String#formatted</li>\n  <li>Collectors#teeing</li>\n  <li>Stream#toList</li>\n</ul>\n<h2 id=\"各変更の詳細\"><a href=\"#各変更の詳細\">各変更の詳細</a></h2>\n<h3 id=\"言語仕様-1\"><a href=\"#言語仕様-1\">言語仕様</a></h3>\n<h4 id=\"switch-expressions-java-12-13-14\"><a href=\"#switch-expressions-java-12-13-14\">Switch Expressions (Java 12, 13, 14)</a></h4>\n<ul>\n  <li><a href=\"https://openjdk.java.net/jeps/325\">JEP 325: Switch Expressions (Preview)</a></li>\n  <li><a href=\"https://openjdk.java.net/jeps/354\">JEP 354: Switch Expressions (Second Preview)</a></li>\n  <li><a href=\"https://openjdk.java.net/jeps/361\">JEP 361: Switch Expressions</a></li>\n</ul>\n<p>\n  switch 式の追加。プログラミング言語の文法には文 (statement) と式 (switch) がある。\n  式は評価した結果が値となるが、文は評価した結果値を返さない。\n  Java の switch は今まで文であったが式としても使えるようになったわけだ。\n  これまで条件分岐で値を返すためには三項演算子 <code>cond ? a : b</code> を使うか、switch 式をメソッドとして抽出する以外の方法がなかった。\n</p>\n<p>この変更で追加された要素は、</p>\n<ul>\n  <li>カンマ区切りによる複数の値に対するマッチ</li>\n  <li><code>case L -></code></li>\n  <li><code>yield</code> キーワード</li>\n</ul>\n<p>になる。</p>\n<h5 id=\"カンマ区切りによる複数の値に対するマッチと-case-l--\"><a href=\"#カンマ区切りによる複数の値に対するマッチと-case-l--\">カンマ区切りによる複数の値に対するマッチと <code>case L -></code></a></h5>\n<p>switch でマッチする値をカンマ区切りで並べることができるようになったことで、下記のようなコードはより短く書くことができる。</p>\n<pre class=\"language-java\"><code class=\"language-java code-highlight\"><span class=\"code-line line-number\" line=\"1\"><span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>day<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n</span><span class=\"code-line line-number\" line=\"2\">    <span class=\"token keyword\">case</span> MONDAY<span class=\"token operator\">:</span>\n</span><span class=\"code-line line-number\" line=\"3\">    <span class=\"token keyword\">case</span> FRIDAY<span class=\"token operator\">:</span>\n</span><span class=\"code-line line-number\" line=\"4\">    <span class=\"token keyword\">case</span> SUNDAY<span class=\"token operator\">:</span>\n</span><span class=\"code-line line-number\" line=\"5\">        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line line-number\" line=\"6\">    <span class=\"token keyword\">case</span> TUESDAY<span class=\"token operator\">:</span>\n</span><span class=\"code-line line-number\" line=\"7\">        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line line-number\" line=\"8\">        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line line-number\" line=\"9\">    <span class=\"token keyword\">case</span> THURSDAY<span class=\"token operator\">:</span>\n</span><span class=\"code-line line-number\" line=\"10\">    <span class=\"token keyword\">case</span> SATURDAY<span class=\"token operator\">:</span>\n</span><span class=\"code-line line-number\" line=\"11\">        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line line-number\" line=\"12\">        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line line-number\" line=\"13\">    <span class=\"token keyword\">case</span> WEDNESDAY<span class=\"token operator\">:</span>\n</span><span class=\"code-line line-number\" line=\"14\">        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line line-number\" line=\"15\">        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line line-number\" line=\"16\"><span class=\"token punctuation\">}</span>\n</span></code></pre>\n<p>\n  今まではフォールスルーを使う必要があったが、マッチさせたい値をカンマ区切りで並べ、<code>:</code> の代わりに <code>-></code> を用いる。\n  また <code>-></code> を使った場合 <code>break</code> は不要となり、フォールスルーは行われない。\n</p>\n<pre class=\"language-java\"><code class=\"language-java code-highlight\"><span class=\"code-line line-number\" line=\"1\">swtich <span class=\"token punctuation\">(</span>day<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n</span><span class=\"code-line line-number\" line=\"2\">    <span class=\"token keyword\">case</span> MONDAY<span class=\"token punctuation\">,</span> FRIDAY<span class=\"token punctuation\">,</span> SUNDAY <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line line-number\" line=\"3\">    <span class=\"token keyword\">case</span> THUESDAY               <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line line-number\" line=\"4\">    <span class=\"token keyword\">case</span> THURSDAY<span class=\"token punctuation\">,</span> STAURDAY     <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line line-number\" line=\"5\">    <span class=\"token keyword\">case</span> WEDNESDAY              <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line line-number\" line=\"6\"><span class=\"token punctuation\">}</span>\n</span></code></pre>\n<p>文ではなく式であるので変数に結果を入れることができる。</p>\n<pre class=\"language-java\"><code class=\"language-java code-highlight\"><span class=\"code-line line-number\" line=\"1\"><span class=\"token keyword\">int</span> numLetters <span class=\"token operator\">=</span> <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>day<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n</span><span class=\"code-line line-number\" line=\"2\">    <span class=\"token keyword\">case</span> MONDAY<span class=\"token punctuation\">,</span> FRIDAY<span class=\"token punctuation\">,</span> SUNDAY <span class=\"token operator\">-></span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line line-number\" line=\"3\">    <span class=\"token keyword\">case</span> TUESDAY                <span class=\"token operator\">-></span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line line-number\" line=\"4\">    <span class=\"token keyword\">case</span> THURSDAY<span class=\"token punctuation\">,</span> SATURDAY     <span class=\"token operator\">-></span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line line-number\" line=\"5\">    <span class=\"token keyword\">case</span> WEDNESDAY              <span class=\"token operator\">-></span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line line-number\" line=\"6\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</span></code></pre>\n<p>式なので当然メソッドの引数の位置に書くこともできる。</p>\n<pre class=\"language-java\"><code class=\"language-java code-highlight\"><span class=\"code-line line-number\" line=\"1\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">howMany</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n</span><span class=\"code-line line-number\" line=\"2\">    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>\n</span><span class=\"code-line line-number\" line=\"3\">        <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n</span><span class=\"code-line line-number\" line=\"4\">            <span class=\"token keyword\">case</span> <span class=\"token number\">1</span>  <span class=\"token operator\">-></span> <span class=\"token string\">\"one\"</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line line-number\" line=\"5\">            <span class=\"token keyword\">case</span> <span class=\"token number\">2</span>  <span class=\"token operator\">-></span> <span class=\"token string\">\"two\"</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line line-number\" line=\"6\">            <span class=\"token keyword\">default</span> <span class=\"token operator\">-></span> <span class=\"token string\">\"many\"</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line line-number\" line=\"7\">        <span class=\"token punctuation\">}</span>\n</span><span class=\"code-line line-number\" line=\"8\">    <span class=\"token punctuation\">)</span>\n</span><span class=\"code-line line-number\" line=\"9\"><span class=\"token punctuation\">}</span>\n</span></code></pre>\n<p><code>-></code> の後が一つの式であればその結果がそのまま switch 式の計算結果の値として扱われるが、そうでない場合は <code>-></code> の後に波括弧 <code>{ ... }</code> を書いて <code>yield</code> キーワードを使って switch 式が返す値を記述する。</p>\n<pre class=\"language-java\"><code class=\"language-java code-highlight\"><span class=\"code-line line-number\" line=\"1\"><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>day<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n</span><span class=\"code-line line-number\" line=\"2\">    <span class=\"token keyword\">case</span> MONDAY  <span class=\"token operator\">-></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line line-number\" line=\"3\">    <span class=\"token keyword\">case</span> TUESDAY <span class=\"token operator\">-></span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line line-number\" line=\"4\">    <span class=\"token keyword\">default</span>      <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n</span><span class=\"code-line line-number\" line=\"5\">        <span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> day<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line line-number\" line=\"6\">        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line line-number\" line=\"7\">        <span class=\"token keyword\">yield</span> result<span class=\"token punctuation\">;</span>\n</span><span class=\"code-line line-number\" line=\"8\">    <span class=\"token punctuation\">}</span>\n</span><span class=\"code-line line-number\" line=\"9\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</span></code></pre>\n<p><code>-></code> を使わずに <code>:</code> を使う場合は <code>yield</code> が必須になる。</p>\n<pre class=\"language-java\"><code class=\"language-java code-highlight\"><span class=\"code-line line-number\" line=\"1\"><span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n</span><span class=\"code-line line-number\" line=\"2\">    <span class=\"token keyword\">case</span> <span class=\"token string\">\"Foo\"</span><span class=\"token operator\">:</span>\n</span><span class=\"code-line line-number\" line=\"3\">        <span class=\"token keyword\">yield</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line line-number\" line=\"4\">    <span class=\"token keyword\">case</span> <span class=\"token string\">\"Bar\"</span><span class=\"token operator\">:</span>\n</span><span class=\"code-line line-number\" line=\"5\">        <span class=\"token keyword\">yield</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line line-number\" line=\"6\">    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n</span><span class=\"code-line line-number\" line=\"7\">        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Neither Foo nor Bar, hmmm...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line line-number\" line=\"8\">        <span class=\"token keyword\">yield</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line line-number\" line=\"9\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</span></code></pre>\n<p><code>:</code> を使った場合は switch 文と同じようにフォールスルーが起こるので気をつける必要がある。</p>\n<p>switch 式は歓迎できる変更ではあるが <code>yield</code> キーワードは必要だったのかについては疑問に思う。</p>\n<h4 id=\"text-blocks-java-13-14-15\"><a href=\"#text-blocks-java-13-14-15\">Text Blocks (Java 13, 14, 15)</a></h4>\n<ul>\n  <li><a href=\"https://openjdk.java.net/jeps/355\">JEP 355: Text Blocks (Preview)</a></li>\n  <li><a href=\"https://openjdk.java.net/jeps/368\">JEP 368: Text Blocks (Second Preview)</a></li>\n  <li><a href=\"https://openjdk.java.net/jeps/378\">JEP 378: Text Blocks</a></li>\n</ul>\n<p>Java で複数行も文字列を記述するためには、下記のコードのように <code>\\n</code> と <code>+</code> による文字列連結を使って記述する必要があった。</p>\n<pre class=\"language-java\"><code class=\"language-java code-highlight\"><span class=\"code-line line-number\" line=\"1\"><span class=\"token class-name\">String</span> html <span class=\"token operator\">=</span> <span class=\"token string\">\"&#x3C;html>\\n\"</span> <span class=\"token operator\">+</span>\n</span><span class=\"code-line line-number\" line=\"2\">              <span class=\"token string\">\"    &#x3C;body>\\n\"</span> <span class=\"token operator\">+</span>\n</span><span class=\"code-line line-number\" line=\"3\">              <span class=\"token string\">\"        &#x3C;p>Hello, World&#x3C;/p>\\n\"</span> <span class=\"token operator\">+</span>\n</span><span class=\"code-line line-number\" line=\"4\">              <span class=\"token string\">\"    &#x3C;/body>\\n\"</span> <span class=\"token operator\">+</span>\n</span><span class=\"code-line line-number\" line=\"5\">              <span class=\"token string\">\"&#x3C;/html>\\n\"</span><span class=\"token punctuation\">;</span>\n</span></code></pre>\n<p>テキストブロックが導入されたことにより上記のコードは下記のように書けるようになる。</p>\n<pre class=\"language-java\"><code class=\"language-java code-highlight\"><span class=\"code-line line-number\" line=\"1\"><span class=\"token class-name\">String</span> html <span class=\"token operator\">=</span> <span class=\"token triple-quoted-string string\">\"\"\"\n</span></span><span class=\"code-line line-number\" line=\"2\"><span class=\"token triple-quoted-string string\">              &#x3C;html>\n</span></span><span class=\"code-line line-number\" line=\"3\"><span class=\"token triple-quoted-string string\">                  &#x3C;body>\n</span></span><span class=\"code-line line-number\" line=\"4\"><span class=\"token triple-quoted-string string\">                      &#x3C;p>Hello, World&#x3C;/p>\n</span></span><span class=\"code-line line-number\" line=\"5\"><span class=\"token triple-quoted-string string\">                  &#x3C;/body>\n</span></span><span class=\"code-line line-number\" line=\"6\"><span class=\"token triple-quoted-string string\">              &#x3C;/html>\n</span></span><span class=\"code-line line-number\" line=\"7\"><span class=\"token triple-quoted-string string\">              \"\"\"</span><span class=\"token punctuation\">;</span>\n</span></code></pre>\n<p><code>\"\"\"</code> で囲んだ文字列内では <code>\"</code> のエスケープや <code>\\n</code> による改行が不要となり、また空白によるインデントも最初の行に合わせて行われる。</p>\n<p>これにより、HTML や SQL、コードなどの記述がこれまでよりも単純で読み易くなる。</p>\n<pre class=\"language-java\"><code class=\"language-java code-highlight\"><span class=\"code-line line-number\" line=\"1\"><span class=\"token class-name\">String</span> query <span class=\"token operator\">=</span> <span class=\"token triple-quoted-string string\">\"\"\"\n</span></span><span class=\"code-line line-number\" line=\"2\"><span class=\"token triple-quoted-string string\">             SELECT \"EMP_ID\", \"LAST_NAME\" FROM \"EMPLOYEE_TB\"\n</span></span><span class=\"code-line line-number\" line=\"3\"><span class=\"token triple-quoted-string string\">             WHERE \"CITY\" = 'INDIANAPOLIS'\n</span></span><span class=\"code-line line-number\" line=\"4\"><span class=\"token triple-quoted-string string\">             ORDER BY \"EMP_ID\", \"LAST_NAME\";\n</span></span><span class=\"code-line line-number\" line=\"5\"><span class=\"token triple-quoted-string string\">             \"\"\"</span><span class=\"token punctuation\">;</span>\n</span></code></pre>\n<pre class=\"language-java\"><code class=\"language-java code-highlight\"><span class=\"code-line line-number\" line=\"1\"><span class=\"token class-name\">String</span> obj <span class=\"token operator\">=</span> engine<span class=\"token punctuation\">.</span><span class=\"token function\">eval</span><span class=\"token punctuation\">(</span><span class=\"token triple-quoted-string string\">\"\"\"\n</span></span><span class=\"code-line line-number\" line=\"2\"><span class=\"token triple-quoted-string string\">                         function hello() {\n</span></span><span class=\"code-line line-number\" line=\"3\"><span class=\"token triple-quoted-string string\">                            print('\"Hello, world\"');\n</span></span><span class=\"code-line line-number\" line=\"4\"><span class=\"token triple-quoted-string string\">                         }\n</span></span><span class=\"code-line line-number\" line=\"5\"><span class=\"token triple-quoted-string string\">\n</span></span><span class=\"code-line line-number\" line=\"6\"><span class=\"token triple-quoted-string string\">                         hello();\n</span></span><span class=\"code-line line-number\" line=\"7\"><span class=\"token triple-quoted-string string\">                         \"\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span></code></pre>\n<h4 id=\"records-java-14-15-16\"><a href=\"#records-java-14-15-16\">Records (Java 14, 15, 16)</a></h4>\n<ul>\n  <li><a href=\"https://openjdk.java.net/jeps/359\">JEP 359: Records (Preview)</a></li>\n  <li><a href=\"https://openjdk.java.net/jeps/384\">JEP 384: Records (Second Preview)</a></li>\n  <li><a href=\"https://openjdk.java.net/jeps/395\">JEP 395: Records</a></li>\n</ul>\n<p>\n  レコードは、lombok を使って <code>@Getter @AllArgsConstructor @EqualsAndHashCode @ToString</code> を付与したクラスに近いコードを短い記述で実現することができる。\n  例えば下記のようなコードは、\n</p>\n<pre class=\"language-java\"><code class=\"language-java code-highlight\"><span class=\"code-line line-number\" line=\"1\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span>\n</span><span class=\"code-line line-number\" line=\"2\">    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span>\n</span><span class=\"code-line line-number\" line=\"3\">    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">;</span>\n</span><span class=\"code-line line-number\" line=\"4\">\n</span><span class=\"code-line line-number\" line=\"5\">    <span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n</span><span class=\"code-line line-number\" line=\"6\">        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n</span><span class=\"code-line line-number\" line=\"7\">        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>\n</span><span class=\"code-line line-number\" line=\"8\">    <span class=\"token punctuation\">}</span>\n</span><span class=\"code-line line-number\" line=\"9\">\n</span><span class=\"code-line line-number\" line=\"10\">    <span class=\"token keyword\">int</span> <span class=\"token function\">x</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n</span><span class=\"code-line line-number\" line=\"11\">    <span class=\"token keyword\">int</span> <span class=\"token function\">y</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> y<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n</span><span class=\"code-line line-number\" line=\"12\">\n</span><span class=\"code-line line-number\" line=\"13\">    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n</span><span class=\"code-line line-number\" line=\"14\">        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>o <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line line-number\" line=\"15\">        <span class=\"token class-name\">Point</span> other <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Point</span><span class=\"token punctuation\">)</span> o<span class=\"token punctuation\">;</span>\n</span><span class=\"code-line line-number\" line=\"16\">        <span class=\"token keyword\">return</span> other<span class=\"token punctuation\">.</span>x <span class=\"token operator\">==</span> x <span class=\"token operator\">&#x26;&#x26;</span> other<span class=\"token punctuation\">.</span>y <span class=\"token operator\">==</span> y<span class=\"token punctuation\">;</span>\n</span><span class=\"code-line line-number\" line=\"17\">    <span class=\"token punctuation\">}</span>\n</span><span class=\"code-line line-number\" line=\"18\">\n</span><span class=\"code-line line-number\" line=\"19\">    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n</span><span class=\"code-line line-number\" line=\"20\">        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">hash</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line line-number\" line=\"21\">    <span class=\"token punctuation\">}</span>\n</span><span class=\"code-line line-number\" line=\"22\">\n</span><span class=\"code-line line-number\" line=\"23\">    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n</span><span class=\"code-line line-number\" line=\"24\">        <span class=\"token keyword\">return</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Point[x=%d, y=%d]\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line line-number\" line=\"25\">    <span class=\"token punctuation\">}</span>\n</span><span class=\"code-line line-number\" line=\"26\"><span class=\"token punctuation\">}</span>\n</span></code></pre>\n<p>以下のように記述するだけでよくなる。</p>\n<pre class=\"language-java\"><code class=\"language-java code-highlight\"><span class=\"code-line line-number\" line=\"1\"><span class=\"token keyword\">record</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n</span></code></pre>\n<p>lombok を利用し、</p>\n<pre class=\"language-java\"><code class=\"language-java code-highlight\"><span class=\"code-line\"><span class=\"token annotation punctuation\">@Getter</span> <span class=\"token annotation punctuation\">@AllArgsConstructor</span> <span class=\"token annotation punctuation\">@EqualsAndHashCode</span> <span class=\"token annotation punctuation\">@ToString</span>\n</span><span class=\"code-line\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span>\n</span><span class=\"code-line\">    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span>\n</span><span class=\"code-line\">    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">;</span>\n</span><span class=\"code-line\"><span class=\"token punctuation\">}</span>\n</span></code></pre>\n<p>\n  と書いた場合の違いとしては、フィールドにアクセスするためのメソッドが <code>getX()</code>、<code>getY()</code> ではなく、<code>x()</code>、<code>y()</code> となることだろうか。\n  メソッド名が <code>getXxx()</code> のようになっていないのはフレームワークやライブラリのことを考えると地味に影響がありそうなので、そのあたりのライブラリ側の対応が進まないと業務で積極的に使っていけないかもしれない。\n  ライブラリの力を絶対に借りないようなところでは使っても問題なさそうだが使用しているフレームワークやライブラリ側の対応が完了しない限りは積極的に使いましょう、と業務では言えないかもしれない。\n</p>\n<p>クラスと同様にコンストラクタを定義することもできる。</p>\n<pre class=\"language-java\"><code class=\"language-java code-highlight\"><span class=\"code-line line-number\" line=\"1\"><span class=\"token keyword\">record</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n</span><span class=\"code-line line-number\" line=\"2\">    <span class=\"token comment\">// Implicitly declared fields</span>\n</span><span class=\"code-line line-number\" line=\"3\">    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span>\n</span><span class=\"code-line line-number\" line=\"4\">    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">;</span>\n</span><span class=\"code-line line-number\" line=\"5\">\n</span><span class=\"code-line line-number\" line=\"6\">    <span class=\"token comment\">// Other implicit declarations elided ...</span>\n</span><span class=\"code-line line-number\" line=\"7\">\n</span><span class=\"code-line line-number\" line=\"8\">    <span class=\"token comment\">// Implicitly declared canonical constructor</span>\n</span><span class=\"code-line line-number\" line=\"9\">    <span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n</span><span class=\"code-line line-number\" line=\"10\">        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n</span><span class=\"code-line line-number\" line=\"11\">        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>\n</span><span class=\"code-line line-number\" line=\"12\">    <span class=\"token punctuation\">}</span>\n</span><span class=\"code-line line-number\" line=\"13\"><span class=\"token punctuation\">}</span>\n</span></code></pre>\n<p>また、コンストラクタの引数を省略して下記のように書くこともできるようだ。</p>\n<pre class=\"language-java\"><code class=\"language-java code-highlight\"><span class=\"code-line line-number\" line=\"1\"><span class=\"token keyword\">record</span> <span class=\"token class-name\">Rational</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> denom<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n</span><span class=\"code-line line-number\" line=\"2\">    <span class=\"token class-name\">Rational</span> <span class=\"token punctuation\">{</span>\n</span><span class=\"code-line line-number\" line=\"3\">        <span class=\"token keyword\">int</span> gcd <span class=\"token operator\">=</span> <span class=\"token function\">gcd</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span> denom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line line-number\" line=\"4\">        num <span class=\"token operator\">/=</span> gcd<span class=\"token punctuation\">;</span>\n</span><span class=\"code-line line-number\" line=\"5\">        denom <span class=\"token operator\">/=</span> gcd<span class=\"token punctuation\">;</span>\n</span><span class=\"code-line line-number\" line=\"6\">    <span class=\"token punctuation\">}</span>\n</span><span class=\"code-line line-number\" line=\"7\"><span class=\"token punctuation\">}</span>\n</span></code></pre>\n<p>実際にはこの記法しか使われないのではないだろうか 🤔</p>\n<p>\n  フィールドのアクセッサは自分で書くことができ、普通のメソッドと同じようだ。\n  Kotlin のフィールドへの getter/setter が自動で作られるのと同じようなものだろう。\n</p>\n<pre class=\"language-java\"><code class=\"language-java code-highlight\"><span class=\"code-line line-number\" line=\"1\"><span class=\"token keyword\">record</span> <span class=\"token class-name\">SmallPoint</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n</span><span class=\"code-line line-number\" line=\"2\">  <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">x</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">&#x3C;</span> <span class=\"token number\">100</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n</span><span class=\"code-line line-number\" line=\"3\">  <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">y</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">&#x3C;</span> <span class=\"token number\">100</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n</span><span class=\"code-line line-number\" line=\"4\"><span class=\"token punctuation\">}</span>\n</span></code></pre>\n<p>\n  lombok の <code>@Builder</code> で生成されるメソッドに相当するものがないのと、言語機能としてもその辺がサポートされていないのが不満ではある。\n  Java は mutable を許容してフィールド書き換えていくのがスタイルだ！というのであれば納得するが、immutable なコレクションや今回の Record の追加を考えると immutable なデータを基本としてプログライングスタイルも推奨しているはずだけど、Stream や Optional の API に続き中途半端な対応になっているのではないだろうか、というのが正直な所だ。\n</p>\n<h4 id=\"pattern-matching-for-instanceof-java-14-15-16\"><a href=\"#pattern-matching-for-instanceof-java-14-15-16\">Pattern Matching for instanceof (Java 14, 15, 16)</a></h4>\n<ul>\n  <li><a href=\"https://openjdk.java.net/jeps/305\">JEP 305: Pattern Matching for instanceof (Preview)</a></li>\n  <li><a href=\"https://openjdk.java.net/jeps/375\">JEP 375: Pattern Matching for instanceof (Second Preview)</a></li>\n  <li><a href=\"https://openjdk.java.net/jeps/394\">JEP 394: Pattern Matching for instanceof</a></li>\n</ul>\n<p>\n  この変更では、<code>obj instanceof T t</code> で <code>obj</code> を <code>T</code> 型で変数 <code>t</code> に束縛して使えるようになる。\n  今までは下記のように <code>if (obj instanceOf T)</code> の中でキャストして変数に束縛する必要があったが、\n</p>\n<pre class=\"language-java\"><code class=\"language-java code-highlight\"><span class=\"code-line line-number\" line=\"1\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n</span><span class=\"code-line line-number\" line=\"2\">    <span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> obj<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// grr...</span>\n</span><span class=\"code-line line-number\" line=\"3\">    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n</span><span class=\"code-line line-number\" line=\"4\"><span class=\"token punctuation\">}</span>\n</span></code></pre>\n<p>以下のように <code>if (obj instanceof T t)</code> と書くだけで <code>if</code> の中で変数 <code>t</code> が <code>T</code> 型として使える。</p>\n<pre class=\"language-java\"><code class=\"language-java code-highlight\"><span class=\"code-line line-number\" line=\"1\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n</span><span class=\"code-line line-number\" line=\"2\">    <span class=\"token comment\">// Let pattern matching do the work!</span>\n</span><span class=\"code-line line-number\" line=\"3\">    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n</span><span class=\"code-line line-number\" line=\"4\"><span class=\"token punctuation\">}</span>\n</span></code></pre>\n<p>また、論理積 <code>&#x26;&#x26;</code> と組み合わせると束縛した後に追加でチェックしたい条件を <code>instanceof</code> でチェックした型で行うことができる。</p>\n<pre class=\"language-java\"><code class=\"language-java code-highlight\"><span class=\"code-line line-number\" line=\"1\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">String</span> s <span class=\"token operator\">&#x26;&#x26;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n</span><span class=\"code-line line-number\" line=\"2\">    flag <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jdk\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line line-number\" line=\"3\"><span class=\"token punctuation\">}</span>\n</span></code></pre>\n<h4 id=\"sealed-classes-java-15-16-17\"><a href=\"#sealed-classes-java-15-16-17\">Sealed Classes (Java 15, 16, 17)</a></h4>\n<ul>\n  <li><a href=\"https://openjdk.java.net/jeps/360\">JEP 360: Sealed Classes (Preview)</a></li>\n  <li><a href=\"https://openjdk.java.net/jeps/397\">JEP 397: Sealed Classes (Second Preview)</a></li>\n  <li><a href=\"https://openjdk.java.net/jeps/409\">JEP 409: Sealed Classes</a></li>\n</ul>\n<p>\n  この変更では、継承先のクラスが限定されたクラス、インターフェースを定義することができる。\n  これにより何が嬉しいかは他の関数型プログラミング言語を触ったことがある人であれば理解できると思うが、これにより Java でもコンパイル時に静的に検査可能なパターンマッチができるようになり、レコードと組み合わせることで世間一般で言われているところの代数的データ型のメリットを Java でも享受できるようになった。\n  <code>sealed</code> というキーワードは恐らく Kotlin や Scala の影響を受けているだろう。\n</p>\n<pre class=\"language-java\"><code class=\"language-java code-highlight\"><span class=\"code-line line-number\" line=\"1\"><span class=\"token keyword\">enum</span> <span class=\"token class-name\">Planet</span> <span class=\"token punctuation\">{</span> MERCURY<span class=\"token punctuation\">,</span> VENUS<span class=\"token punctuation\">,</span> EARTH <span class=\"token punctuation\">}</span>\n</span><span class=\"code-line line-number\" line=\"2\">\n</span><span class=\"code-line line-number\" line=\"3\"><span class=\"token class-name\">Planet</span> p <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n</span><span class=\"code-line line-number\" line=\"4\"><span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n</span><span class=\"code-line line-number\" line=\"5\">  <span class=\"token keyword\">case</span> MERCURY<span class=\"token operator\">:</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n</span><span class=\"code-line line-number\" line=\"6\">  <span class=\"token keyword\">case</span> VENUS<span class=\"token operator\">:</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n</span><span class=\"code-line line-number\" line=\"7\">  <span class=\"token keyword\">case</span> EARTH<span class=\"token operator\">:</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n</span><span class=\"code-line line-number\" line=\"8\"><span class=\"token punctuation\">}</span>\n</span></code></pre>\n<pre class=\"language-java\"><code class=\"language-java code-highlight\"><span class=\"code-line line-number\" line=\"1\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Celestial</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span>\n</span><span class=\"code-line line-number\" line=\"2\"><span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Planet</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Celestial</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span>\n</span><span class=\"code-line line-number\" line=\"3\"><span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Star</span>   <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Celestial</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span>\n</span><span class=\"code-line line-number\" line=\"4\"><span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Comet</span>  <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Celestial</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span>\n</span></code></pre>\n<pre class=\"language-java\"><code class=\"language-java code-highlight\"><span class=\"code-line line-number\" line=\"1\"><span class=\"token keyword\">sealed</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Celestial</span>\n</span><span class=\"code-line line-number\" line=\"2\">    <span class=\"token keyword\">permits</span> <span class=\"token class-name\">Planet</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Star</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Comet</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span>\n</span><span class=\"code-line line-number\" line=\"3\">\n</span><span class=\"code-line line-number\" line=\"4\"><span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Planet</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Celestial</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span>\n</span><span class=\"code-line line-number\" line=\"5\"><span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Star</span>   <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Celestial</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span>\n</span><span class=\"code-line line-number\" line=\"6\"><span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Comet</span>  <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Celestial</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span>\n</span></code></pre>\n<pre class=\"language-java\"><code class=\"language-java code-highlight\"><span class=\"code-line line-number\" line=\"1\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>geometry</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line line-number\" line=\"2\">\n</span><span class=\"code-line line-number\" line=\"3\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">sealed</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Shape</span>\n</span><span class=\"code-line line-number\" line=\"4\">    <span class=\"token keyword\">permits</span> <span class=\"token class-name\">Circle</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Rectangle</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Square</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span>\n</span></code></pre>\n<pre class=\"language-java\"><code class=\"language-java code-highlight\"><span class=\"code-line line-number\" line=\"1\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">sealed</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Expr</span>\n</span><span class=\"code-line line-number\" line=\"2\">    <span class=\"token keyword\">permits</span> <span class=\"token class-name\">ConstantExpr</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">PlusExpr</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimesExpr</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">NegExpr</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span>\n</span><span class=\"code-line line-number\" line=\"3\">\n</span><span class=\"code-line line-number\" line=\"4\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">record</span> <span class=\"token class-name\">ConstantExpr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span>       <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Expr</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span>\n</span><span class=\"code-line line-number\" line=\"5\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">record</span> <span class=\"token class-name\">PlusExpr</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Expr</span> a<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Expr</span> b<span class=\"token punctuation\">)</span>  <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Expr</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span>\n</span><span class=\"code-line line-number\" line=\"6\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">record</span> <span class=\"token class-name\">TimesExpr</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Expr</span> a<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Expr</span> b<span class=\"token punctuation\">)</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Expr</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span>\n</span><span class=\"code-line line-number\" line=\"7\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">record</span> <span class=\"token class-name\">NegExpr</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Expr</span> e<span class=\"token punctuation\">)</span>           <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Expr</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span>\n</span></code></pre>\n<h4 id=\"pattern-matching-for-switch-java-17\"><a href=\"#pattern-matching-for-switch-java-17\">Pattern Matching for switch (Java 17)</a></h4>\n<ul>\n  <li><a href=\"https://openjdk.java.net/jeps/406\">JEP 406: Pattern Matching for switch (Preview)</a></li>\n</ul>\n<p>\n  <code>switch</code> でのパターンマッチで <code>instanceof</code> でのパターンマッチの使い勝手を良くするための変更だろう。\n  Java 14, 15, 16 を経て <code>if</code> と一緒に <code>instanceof</code> を使うことでマッチした変数をマッチした型として別名で扱えるようになったが、複数の型にマッチさせて動作を変えようとすると下記のようにする必要がある。\n</p>\n<pre class=\"language-java\"><code class=\"language-java code-highlight\"><span class=\"code-line line-number\" line=\"1\"><span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">formatter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n</span><span class=\"code-line line-number\" line=\"2\">    <span class=\"token class-name\">String</span> formatted <span class=\"token operator\">=</span> <span class=\"token string\">\"unknown\"</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line line-number\" line=\"3\">    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>o <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Integer</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n</span><span class=\"code-line line-number\" line=\"4\">        formatted <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"int %d\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line line-number\" line=\"5\">    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>o <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Long</span> l<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n</span><span class=\"code-line line-number\" line=\"6\">        formatted <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"long %d\"</span><span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line line-number\" line=\"7\">    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>o <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Double</span> d<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n</span><span class=\"code-line line-number\" line=\"8\">        formatted <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"double %f\"</span><span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line line-number\" line=\"9\">    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>o <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n</span><span class=\"code-line line-number\" line=\"10\">        formatted <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"String %s\"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line line-number\" line=\"11\">    <span class=\"token punctuation\">}</span>\n</span><span class=\"code-line line-number\" line=\"12\">    <span class=\"token keyword\">return</span> formatted<span class=\"token punctuation\">;</span>\n</span><span class=\"code-line line-number\" line=\"13\"><span class=\"token punctuation\">}</span>\n</span></code></pre>\n<p>これでは、聊か不便なのでもう一つの制御構文である <code>switch</code> でも同様のことができるようにし、<code>switch</code> が式となっていることで不要な変数宣言や <code>instanceof</code> の重複がなくなりすっきりと書けるようになった。</p>\n<pre class=\"language-java\"><code class=\"language-java code-highlight\"><span class=\"code-line line-number\" line=\"1\"><span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">formatterPatternSwitch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n</span><span class=\"code-line line-number\" line=\"2\">    <span class=\"token keyword\">return</span> <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n</span><span class=\"code-line line-number\" line=\"3\">        <span class=\"token keyword\">case</span> <span class=\"token class-name\">Integer</span> i <span class=\"token operator\">-></span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"int %d\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line line-number\" line=\"4\">        <span class=\"token keyword\">case</span> <span class=\"token class-name\">Long</span> l    <span class=\"token operator\">-></span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"long %d\"</span><span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line line-number\" line=\"5\">        <span class=\"token keyword\">case</span> <span class=\"token class-name\">Double</span> d  <span class=\"token operator\">-></span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"double %f\"</span><span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line line-number\" line=\"6\">        <span class=\"token keyword\">case</span> <span class=\"token class-name\">String</span> s  <span class=\"token operator\">-></span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"String %s\"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line line-number\" line=\"7\">        <span class=\"token keyword\">default</span>        <span class=\"token operator\">-></span> o<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line line-number\" line=\"8\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line line-number\" line=\"9\"><span class=\"token punctuation\">}</span>\n</span></code></pre>\n<p>\n  <code>case</code> では <code>null</code> に対するマッチも行えるようになっている。\n  <code>switch</code> を使うときに <code>null</code> チェックを忘れて <code>NullPointerException</code> を出してしまうミスも減らせるかもしれない 🤔\n</p>\n<pre class=\"language-java\"><code class=\"language-java code-highlight\"><span class=\"code-line line-number\" line=\"1\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testFooBar</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n</span><span class=\"code-line line-number\" line=\"2\">    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n</span><span class=\"code-line line-number\" line=\"3\">        <span class=\"token keyword\">case</span> <span class=\"token keyword\">null</span>         <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Oops\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line line-number\" line=\"4\">        <span class=\"token keyword\">case</span> <span class=\"token string\">\"Foo\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Bar\"</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Great\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line line-number\" line=\"5\">        <span class=\"token keyword\">default</span>           <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Ok\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line line-number\" line=\"6\">    <span class=\"token punctuation\">}</span>\n</span><span class=\"code-line line-number\" line=\"7\"><span class=\"token punctuation\">}</span>\n</span></code></pre>\n<p>\n  また、<code>swtich</code> ではパターンマッチだけでなく条件式を書くこともできるようになっている。\n  そのため、下記のようにある型にマッチしてなお且つある条件を満たす場合は…といった条件分岐を伴うコードは、\n</p>\n<pre class=\"language-java\"><code class=\"language-java code-highlight\"><span class=\"code-line line-number\" line=\"1\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Shape</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n</span><span class=\"code-line line-number\" line=\"2\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Rectangle</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Shape</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n</span><span class=\"code-line line-number\" line=\"3\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Triangle</span>  <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Shape</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">int</span> <span class=\"token function\">calculateArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n</span><span class=\"code-line line-number\" line=\"4\">\n</span><span class=\"code-line line-number\" line=\"5\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testTriangle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Shape</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n</span><span class=\"code-line line-number\" line=\"6\">    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n</span><span class=\"code-line line-number\" line=\"7\">        <span class=\"token keyword\">case</span> <span class=\"token keyword\">null</span><span class=\"token operator\">:</span>\n</span><span class=\"code-line line-number\" line=\"8\">            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line line-number\" line=\"9\">        <span class=\"token keyword\">case</span> <span class=\"token class-name\">Triangle</span> t<span class=\"token operator\">:</span>\n</span><span class=\"code-line line-number\" line=\"10\">            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span><span class=\"token function\">calculateArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n</span><span class=\"code-line line-number\" line=\"11\">                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Large triangle\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line line-number\" line=\"12\">                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line line-number\" line=\"13\">            <span class=\"token punctuation\">}</span>\n</span><span class=\"code-line line-number\" line=\"14\">        <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n</span><span class=\"code-line line-number\" line=\"15\">            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A shape, possibly a small triangle\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line line-number\" line=\"16\">    <span class=\"token punctuation\">}</span>\n</span><span class=\"code-line line-number\" line=\"17\"><span class=\"token punctuation\">}</span>\n</span></code></pre>\n<p>以下のように書くことができる。</p>\n<pre class=\"language-java\"><code class=\"language-java code-highlight\"><span class=\"code-line line-number\" line=\"1\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testTriangle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Shape</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n</span><span class=\"code-line line-number\" line=\"2\">    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n</span><span class=\"code-line line-number\" line=\"3\">        <span class=\"token keyword\">case</span> <span class=\"token class-name\">Triangle</span> t <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span><span class=\"token function\">calculateArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span>\n</span><span class=\"code-line line-number\" line=\"4\">            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Large triangle\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line line-number\" line=\"5\">        <span class=\"token keyword\">case</span> <span class=\"token class-name\">Triangle</span> t <span class=\"token operator\">-></span>\n</span><span class=\"code-line line-number\" line=\"6\">            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Small triangle\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line line-number\" line=\"7\">        <span class=\"token keyword\">default</span> <span class=\"token operator\">-></span>\n</span><span class=\"code-line line-number\" line=\"8\">            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Non-triangle\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line line-number\" line=\"9\">    <span class=\"token punctuation\">}</span>\n</span><span class=\"code-line line-number\" line=\"10\"><span class=\"token punctuation\">}</span>\n</span></code></pre>\n<p>Sealed Classes に対する網羅性チェックもされるため、下記のようなコードはコンパイルエラーとなる。</p>\n<pre class=\"language-java\"><code class=\"language-java code-highlight\"><span class=\"code-line line-number\" line=\"1\"><span class=\"token keyword\">sealed</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">S</span> <span class=\"token keyword\">permits</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">C</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n</span><span class=\"code-line line-number\" line=\"2\"><span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">S</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n</span><span class=\"code-line line-number\" line=\"3\"><span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">S</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n</span><span class=\"code-line line-number\" line=\"4\"><span class=\"token keyword\">record</span> <span class=\"token class-name\">C</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">S</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>  <span class=\"token comment\">// Implicitly final</span>\n</span><span class=\"code-line line-number\" line=\"5\">\n</span><span class=\"code-line line-number\" line=\"6\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">switchStatementComplete</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">S</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n</span><span class=\"code-line line-number\" line=\"7\">    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>    <span class=\"token comment\">// Error - incomplete; missing clause for permitted class B!</span>\n</span><span class=\"code-line line-number\" line=\"8\">        <span class=\"token keyword\">case</span> <span class=\"token class-name\">A</span> a <span class=\"token operator\">:</span>\n</span><span class=\"code-line line-number\" line=\"9\">            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line line-number\" line=\"10\">            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line line-number\" line=\"11\">        <span class=\"token keyword\">case</span> <span class=\"token class-name\">C</span> c <span class=\"token operator\">:</span>\n</span><span class=\"code-line line-number\" line=\"12\">            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"B\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line line-number\" line=\"13\">            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line line-number\" line=\"14\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line line-number\" line=\"15\"><span class=\"token punctuation\">}</span>\n</span></code></pre>\n<h3 id=\"api-1\"><a href=\"#api-1\">API</a></h3>\n<h4 id=\"stringtransform-java-12\"><a href=\"#stringtransform-java-12\">String#transform (Java 12)</a></h4>\n<ul>\n  <li><a href=\"https://docs.oracle.com/en/java/javase/12/docs/api/java.base/java/lang/String.html#transform(java.util.function.Function)\">String (Java SE 12 &#x26; JDK 12 )</a></li>\n</ul>\n<p>\n  文字列を任意の型に変換させるメッド。\n  <code>Optional</code> や <code>Stream</code> のように関数を適用する順番に書きたい場面で使うという感じだろうか。\n</p>\n<h4 id=\"stringformatted-java-15\"><a href=\"#stringformatted-java-15\">String#formatted (Java 15)</a></h4>\n<ul>\n  <li><a href=\"https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/String.html#formatted(java.lang.Object...)\">String (Java SE 17 &#x26; JDK 17)</a></li>\n</ul>\n<p>\n  今までは <code>String.format(str, ...)</code> と書く必要があった処理を <code>str.formatted(...)</code> のように書くことができるようになった。\n  できることは変わってないが見た目がすっきりする。\n  Text Blocks と一緒に使うことで複数行からなる文字列に対して変数の値を連結したいようなコードの記述がかなり簡潔に書けるようになる。\n</p>\n<h4 id=\"collectionsteeing-java-12\"><a href=\"#collectionsteeing-java-12\">Collections#teeing (Java 12)</a></h4>\n<ul>\n  <li><a href=\"https://docs.oracle.com/en/java/javase/12/docs/api/java.base/java/util/stream/Collectors.html#teeing(java.util.stream.Collector,java.util.stream.Collector,java.util.function.BiFunction)\">Collectors (Java SE 12 &#x26; JDK 12 )</a></li>\n</ul>\n<p>\n  二つの Collector の結果を纏めることができる。\n  使い所はありそうな気がするけど、使える場面に出会ったときに気がつけるか怪しい。\n</p>\n<h4 id=\"streamtolist-java-16\"><a href=\"#streamtolist-java-16\">Stream#toList (Java 16)</a></h4>\n<ul>\n  <li><a href=\"https://bugs.openjdk.java.net/browse/JDK-8180352\">Add Stream.toList() method</a></li>\n  <li><a href=\"https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/stream/Stream.html\">Stream (Java SE 17 &#x26; Java 17)</a></li>\n</ul>\n<p><code>toList</code> が追加されたのは嬉しいけど <code>toMap</code>、<code>toSet</code> も一緒に追加して欲しい。</p>\n<h4 id=\"streammapmulti-java-17\"><a href=\"#streammapmulti-java-17\">Stream#mapMulti (Java 17)</a></h4>\n<ul>\n  <li><a href=\"https://cr.openjdk.java.net/~iris/se/16/latestSpec/api/java.base/java/util/stream/Stream.html#mapMulti%28java.util.function.BiConsumer%29\">Stream#mapMulti</a></li>\n  <li><a href=\"https://qiita.com/nowokay/items/215769cdcb14d6c5412f\">RFR[8238286]: 'Add new flatMap stream operation that is more amenable to pushing’</a></li>\n</ul>\n<h2 id=\"まとめ\"><a href=\"#まとめ\">まとめ</a></h2>\n<p>\n  Java 11 ~ Java 17 の間で採用された変更の中で個人的に気になったものについて簡単に触れた。\n  正直なところどれも他の言語であれば既にある機能か、より簡単に実現できるものばかりなので目新しさはない。\n</p>\n<h2 id=\"参考\"><a href=\"#参考\">参考</a></h2>\n<ul>\n  <li><a href=\"https://qiita.com/nowokay/items/0e860819b6ffb1aca90a\">Java 12 新機能まとめ - Qiita</a></li>\n  <li><a href=\"https://qiita.com/nowokay/items/3e1625a77cb435394547\">Java 13 新機能まとめ - Qiita</a></li>\n  <li><a href=\"https://qiita.com/nowokay/items/ec85d97a7cecaaac8123\">Java 14 新機能まとめ - Qiita</a></li>\n  <li><a href=\"https://qiita.com/nowokay/items/2858699bc1cd89222cd8\">Java 15 新機能まとめ - Qiita</a></li>\n  <li><a href=\"https://qiita.com/nowokay/items/215769cdcb14d6c5412f\">Java 16 新機能まとめ - Qiita</a></li>\n  <li><a href=\"https://qiita.com/nowokay/items/ec58bf8f30d236a12acb\">Java 17 新機能まとめ - Qiita</a></li>\n</ul>\n"},"__N_SSG":true}